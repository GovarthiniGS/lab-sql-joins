-- 1. List the number of films per category
SELECT 
    c.name AS category, 
    COUNT(f.film_id) AS number_of_films
FROM 
    sakila.film f
JOIN 
    sakila.film_category fc ON f.film_id = fc.film_id
JOIN 
    sakila.category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    number_of_films DESC;

-- 2. Retrieve the store ID, city, and country for each store
SELECT 
    s.store_id, 
    ci.city, 
    co.country
FROM 
    sakila.store s
JOIN 
    sakila.address a ON s.address_id = a.address_id
JOIN 
    sakila.city ci ON a.city_id = ci.city_id
JOIN 
    sakila.country co ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars
SELECT 
    i.store_id, 
    SUM(p.amount) AS total_revenue
FROM 
    sakila.payment p
JOIN 
    sakila.rental r ON p.rental_id = r.rental_id
JOIN 
    sakila.inventory i ON r.inventory_id = i.inventory_id
JOIN 
    sakila.store s ON i.store_id = s.store_id
GROUP BY 
    i.store_id
ORDER BY 
    total_revenue DESC;


-- 4. Determine the average running time of films for each category
SELECT 
    c.name AS category, 
    ROUND(AVG(f.length), 2) AS average_running_time
FROM 
    sakila.film f
JOIN 
    sakila.film_category fc ON f.film_id = fc.film_id
JOIN 
    sakila.category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    average_running_time DESC;
    
    -- Bonus
    -- 5. Identify the film categories with the longest average running time
SELECT 
    c.name AS category, 
    ROUND(AVG(f.length), 2) AS average_running_time
FROM 
    sakila.film f
JOIN 
    sakila.film_category fc ON f.film_id = fc.film_id
JOIN 
    sakila.category c ON fc.category_id = c.category_id
GROUP BY 
    c.name
ORDER BY 
    average_running_time DESC
LIMIT 10;

-- 6. Display the top 10 most frequently rented movies in descending order
SELECT 
    f.title, 
    COUNT(r.rental_id) AS rental_count
FROM 
    sakila.rental r
JOIN 
    sakila.inventory i ON r.inventory_id = i.inventory_id
JOIN 
    sakila.film f ON i.film_id = f.film_id
GROUP BY 
    f.title
ORDER BY 
    rental_count DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1
SELECT 
    f.title, 
    i.store_id, 
    i.inventory_id
FROM 
    sakila.film f
JOIN 
    sakila.inventory i ON f.film_id = i.film_id
WHERE 
    f.title = 'Academy Dinosaur' 
    AND i.store_id = 1 
    AND i.inventory_id NOT IN (SELECT inventory_id FROM sakila.rental WHERE return_date IS NULL);

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory
SELECT 
    title,
    CASE
        WHEN MAX(inventory_id) IS NULL THEN 'NOT available'
        ELSE 'Available'
    END AS availability_status
FROM (
    SELECT 
        f.title, 
        i.inventory_id,
        r.return_date
    FROM 
        sakila.film f
    LEFT JOIN 
        sakila.inventory i ON f.film_id = i.film_id
    LEFT JOIN 
        sakila.rental r ON i.inventory_id = r.inventory_id AND r.return_date IS NULL
) sub
GROUP BY 
    title;

